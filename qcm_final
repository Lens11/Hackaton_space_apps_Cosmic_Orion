import pygame
import sys

# Initialiser pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
FPS = 60

# Charger l'image de fond (ajuste le chemin si nécessaire)
background_image = pygame.image.load(r"C:\Users\Picard\Desktop\espace.jpg")
background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))

# Configurer l'écran
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Jeu de QCM - Thème de l'espace")

# Taille de la police maximale
MAX_FONT_SIZE = 30
MIN_FONT_SIZE = 18

# Fonction pour choisir la taille de la police en fonction de la longueur du texte
def get_font_size(text, max_width):
    font_size = MAX_FONT_SIZE
    font = pygame.font.SysFont("comicsansms", font_size)
    while font.size(text)[0] > max_width and font_size > MIN_FONT_SIZE:
        font_size -= 1
        font = pygame.font.SysFont("comicsansms", font_size)
    return font

# Fonction pour afficher le texte centré
def draw_text(text, color, surface, x, y, max_width):
    font = get_font_size(text, max_width)
    text_obj = font.render(text, True, color)
    text_rect = text_obj.get_rect(center=(x, y))
    surface.blit(text_obj, text_rect)

# Classe pour gérer le QCM
class QCMGame:
    def __init__(self, questions, correct_answers):
        self.questions = questions
        self.correct_answers = correct_answers
        self.current_question = 0
        self.score = 0
        self.user_choice = None
        self.feedback_message = None
        self.feedback_time = 0  # Temps pour afficher le feedback (en millisecondes)

    def display_question(self):
        # Affiche la question et les options à l'écran
        screen.blit(background_image, (0, 0))  # Affiche le fond spatial
        question_text, options = self.questions[self.current_question]
        draw_text(question_text, WHITE, screen, WIDTH // 2, HEIGHT // 4, WIDTH - 20)

        # Affiche les options
        for i, option in enumerate(options):
            draw_text(f"{i + 1}. {option}", WHITE, screen, WIDTH // 2, HEIGHT // 2 + i * 50, WIDTH - 20)  # Augmenté l'espacement

        # Affiche le message de feedback
        if self.feedback_message:
            draw_text(self.feedback_message, GREEN if self.feedback_message == "Very good!" else RED, screen, WIDTH // 2, HEIGHT - 100, WIDTH - 20)

        # Affiche la consigne
        draw_text("Type the number of the correct answer on your keyboard.", YELLOW, screen, WIDTH // 2, HEIGHT - 50, WIDTH - 20)

        pygame.display.flip()

    def check_answer(self):
        # Vérifie si la réponse est correcte
        if self.user_choice == self.correct_answers[self.current_question]:
            self.score += 1
            self.feedback_message = "Very good!"
            self.feedback_time = pygame.time.get_ticks()  # Enregistre le temps actuel
        else:
            self.feedback_message = "Wrong answer! Try again."

    def next_question(self):
        # Passe à la question suivante après un petit délai si la réponse est correcte
        current_time = pygame.time.get_ticks()
        if self.feedback_message == "Very good!" and current_time - self.feedback_time > 1000:  # 1 seconde d'affichage du message
            self.current_question += 1
            self.user_choice = None
            self.feedback_message = None  # Réinitialiser le message

    def is_finished(self):
        return self.current_question >= len(self.questions)

# Fonction principale
def main():
    clock = pygame.time.Clock()

    # Différents ensembles de questions et réponses: c'est là où je vais créer les QCM!!!
    # Fonction principale
    def main():
        clock = pygame.time.Clock()

    # Different sets of questions and answers
    # Quiz for Gas Giant
    qcm_1_gasgiant = [
        ("What are gas giants primarily composed of?", ["Hydrogen and helium", "Metal and dust", "Water and carbon dioxide", "Rock and ice"]),
    ]
    correct_answers_gasgiant_1 = ["1"]  # A) Hydrogen and helium

    qcm_2_gasgiant = [
        ("Which two planets in our solar system are gas giants?", ["Jupiter and Saturn", "Earth and Mars", "Jupiter and Neptune", "Venus and Uranus"]),
        ("What is a hot Jupiter?", ["A gas giant that is far from its star", "A small, rocky planet close to its star", "A gas giant orbiting close to its star, making it extremely hot", "A gas giant with a solid surface"]),
    ]
    correct_answers_gasgiant_2 = ["0", "2"]  # A) Jupiter and Saturn, C) A gas giant orbiting close to its star

    qcm_3_gasgiant = [
        ("How many exoplanets have scientists discovered in the last 25 years?", ["Over 100", "Over 500", "Over 5,600", "Over 56,000"]),
        ("What is the name of the youngest hot Jupiter ever found?", ["WASP-12b", "HIP 67522 b", "HD 209458 b", "Kepler-22b"]),
        ("How long does it take HIP 67522 b to orbit its star?", ["90 days", "7 days", "365 days", "30 days"]),
    ]
    correct_answers_gasgiant_3 = ["2", "0", "1"]  # B) Over 5,600, A) HIP 67522 b, B) 7 days

    # Quiz for Neptunian Planet
    qcm_1_neptunian = [
        ("What type of atmosphere do Neptunian planets typically have?", ["Hydrogen and helium-dominated atmosphere", "Oxygen-rich atmosphere", "Sulfur-rich atmosphere", "Carbon dioxide-rich atmosphere"]),
    ]
    correct_answers_neptunian_1 = ["0"]  # A) Hydrogen and helium-dominated atmosphere

    qcm_2_neptunian = [
        ("What are mini-Neptunes?", ["Gas giants with rocky surfaces", "Planets smaller than Neptune and bigger than Earth", "Rocky planets with liquid water", "Planets larger than Neptune"]),
        ("Which two planets in our solar system are considered ice giants?", ["Earth and Mars", "Mercury and Venus", "Uranus and Neptune", "Saturn and Jupiter"]),
    ]
    correct_answers_neptunian_2 = ["1", "2"]  # B) Planets smaller than Neptune, C) Uranus and Neptune

    qcm_3_neptunian = [
        ("How much larger is Neptune compared to Earth?", ["Six times the size", "Four times the size", "Eight times the size", "Two times the size"]),
        ("What chemicals are commonly found in the atmospheres of Uranus and Neptune?", ["Carbon dioxide and nitrogen", "Water, ammonia, and methane", "Hydrogen and oxygen", "Helium and sulfur"]),
        ("How far away was the ice giant exoplanet discovered in 2014?", ["25,000 light-years", "10,000 light-years", "100,000 light-years", "1,000 light-years"]),
    ]
    correct_answers_neptunian_3 = ["1", "1", "0"]  # B) Four times the size, B) Water, ammonia, and methane, A) 25,000 light-years

    # Quiz for Terrestrial Planet
    qcm_1_terrestrial = [
        ("What are terrestrial planets primarily composed of?", ["Rock, silicate, water, and/or carbon", "Hydrogen and helium", "Gas and ice", "Metal and dust"]),
    ]
    correct_answers_terrestrial_1 = ["0"]  # A) Rock, silicate, water, and/or carbon

    qcm_2_terrestrial = [
        ("How many terrestrial planets are estimated to exist in the Milky Way galaxy?", ["10 billion", "20 billion", "5 billion", "1 billion"]),
        ("What are super-Earths?", ["Gas giants", "Exoplanets smaller than Earth", "Terrestrial exoplanets larger than Earth", "Planets with no solid surface"]),
    ]
    correct_answers_terrestrial_2 = ["2", "2"]  # C) 5 billion, C) Terrestrial exoplanets larger than Earth

    qcm_3_terrestrial = [
        ("How far away is the TRAPPIST-1 system from Earth?", ["30 light-years", "40 light-years", "20 light-years", "10 light-years"]),
        ("What unique feature do binary star systems provide for terrestrial planets?", ["Reduced harmful radiation levels", "Increased gravity", "Smaller orbits", "Harmful radiation"]),
        ("What is Kepler-11 b known for?", ["Being part of a binary star system", "Having a solid surface", "Being the largest terrestrial planet", "Orbiting its star very closely"]),
    ]
    correct_answers_terrestrial_3 = ["1", "0", "3"]  # B) 40 light-years, A) Reduced harmful radiation levels, D) Orbiting its star very closely

    # Quiz for Super Earth
    qcm_1_super_earth = [
        ("What is the mass range of super-Earths compared to Earth?", ["2 to 10 times the mass of Earth", "1 to 2 times the mass of Earth", "More than 10 times the mass of Earth", "Less than Earth's mass"]),
    ]
    correct_answers_super_earth_1 = ["0"]  # A) 2 to 10 times the mass of Earth

    qcm_2_super_earth = [
        ("What defines a super-Earth in terms of its mass?", ["Smaller than Earth", "Equal to Earth's mass", "Larger than gas giants like Uranus and Neptune", "Larger than Earth's but smaller than gas giants"]),
        ("What types of materials can super-Earths be composed of?", ["Only gas", "Gas, rock, or a combination of both", "Only rock", "Liquid metals"]),
    ]
    correct_answers_super_earth_2 = ["3", "1"]  # D) Larger than Earth's but smaller than gas giants, B) Gas, rock, or a combination of both

    qcm_3_super_earth = [
        ("What makes super-Earths particularly interesting to scientists?", ["They have solid surfaces only", "They offer a glimpse into the diversity of planetary systems beyond our own", "They have atmospheres similar to Earth", "They are the most massive exoplanets known"]),
        ("How does the mass of super-Earths compare to ice giants like Uranus and Neptune?", ["None of the above", "Lighter than ice giants", "The same mass as ice giants", "Heavier than ice giants"]),
        ("In addition to their mass, what characteristic is commonly studied in super-Earths?", ["Their orbital speed", "Their rotation period", "Their proximity to Earth", "Their composition and atmosphere"]),
    ]
    correct_answers_super_earth_3 = ["1", "2", "3"]  # B) They offer a glimpse into the diversity of planetary systems beyond our own, C) Lighter than ice giants, D) Their composition and atmosphere

    # ---- CHOIX DU QCM ----
    # Ici, tu peux choisir quel QCM lancer (choisir quel QCM lancer)
    game = QCMGame(qcm_3_super_earth, correct_answers_super_earth_3)

    # Boucle de jeu pour le QCM sélectionné
    running = True
    while running:
        game.display_question()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                sys.exit()

            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    game.user_choice = "1"
                elif event.key == pygame.K_2:
                    game.user_choice = "2"
                elif event.key == pygame.K_3:
                    game.user_choice = "3"
                elif event.key == pygame.K_4:
                    game.user_choice = "4"

                if game.user_choice:
                    game.check_answer()

        # Si la réponse est correcte, passer à la question suivante après une courte pause
        game.next_question()

        # Vérifier si le QCM est terminé
        if game.is_finished():
            print(f"QCM terminé ! Score final : {game.score}/{len(game.questions)}")
            running = False

        clock.tick(FPS)

if __name__ == "__main__":
    main()
